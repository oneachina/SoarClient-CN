buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.6.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:2.2.0"
    }
}

plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
}

project.ext.lwjglVersion = "3.3.3"
version = project.mod_version
group = project.maven_group

apply plugin: "org.jetbrains.kotlin.jvm"

base {
	archivesName = project.archives_base_name
}

loom {
	accessWidenerPath = file("src/main/resources/soar.accesswidener")
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
	maven { url "https://api.modrinth.com/maven" }
	maven { url "https://maven.lenni0451.net/everything" }
	maven { url "https://repo.viaversion.com/" }
	maven { url "https://repo.opencollab.dev/maven-snapshots/" }
	maven { url "https://maven.terraformersmc.com/" }
}

configurations {
    jij
	modJij
	include.extendsFrom modJij
    modImplementation.extendsFrom modJij
    modCompileOnlyApi.extendsFrom modJij
	proguard
}

dependencies {

	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("net.fabricmc:fabric-language-kotlin:1.13.4+kotlin.2.2.0")

	modImplementation "com.viaversion:viafabricplus-api:4.0.2"

	modRuntimeOnly "maven.modrinth:sodium:mc1.21.4-0.6.6-fabric"
	modRuntimeOnly "maven.modrinth:iris:1.8.5+1.21.4-fabric"
	modRuntimeOnly "maven.modrinth:sodium-extra:mc1.21.4-0.6.1+fabric"
	modRuntimeOnly "maven.modrinth:lithium:mc1.21.4-0.14.7-fabric"
	modRuntimeOnly "maven.modrinth:in-game-account-switcher:WBbjirJP"
	modRuntimeOnly "com.viaversion:viafabricplus:4.0.2"
	modRuntimeOnly "maven.modrinth:immediatelyfast:1.3.3+1.21.4-fabric"
	modRuntimeOnly "maven.modrinth:entityculling:NkBXk0Ye"

	jij 'com.github.ben-manes.caffeine:caffeine:3.1.8'
	jij 'io.github.humbleui:types:0.2.0'
	jij 'io.github.humbleui:skija-windows-x64:0.116.4'
	jij 'io.github.humbleui:skija-linux-x64:0.116.4'
	jij 'io.github.humbleui:skija-macos-x64:0.116.4'
	jij 'io.github.humbleui:skija-macos-arm64:0.116.4'
	jij 'com.kohlschutter.junixsocket:junixsocket-common:2.10.1'
	jij 'org.java-websocket:Java-WebSocket:1.6.0'
	jij "net.lenni0451:MCPing:1.4.2"
	jij "net.lenni0451:Reflect:1.4.0"
	
	modJij 'com.github.CCBlueX:mcef:3.0.0-1.21.4'

	proguard 'com.guardsquare:proguard-base:7.6.1'

    compileOnly 'org.projectlombok:lombok:1.18.24'

    def lwjglNfdDeps = [
        "org.lwjgl:lwjgl-nfd:$lwjglVersion",
        "org.lwjgl:lwjgl-nfd::natives-linux",
        "org.lwjgl:lwjgl-nfd::natives-macos",
        "org.lwjgl:lwjgl-nfd::natives-macos-arm64",
        "org.lwjgl:lwjgl-nfd::natives-windows"
    ]
    
    // Add LWJGL NFD dependencies to both jij and implementation
    lwjglNfdDeps.each { dep ->
        jij dep
        implementation dep
        include dep
    }
	
	afterEvaluate {
        configurations.jij.incoming.resolutionResult.allDependencies.each {
            dependencies.include(dependencies.implementation(dependencies.compileOnlyApi(it.requested.toString()) {
                transitive = false
            }))
        }
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

java {
	withSourcesJar()

}

task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn jar
    injars jar.archiveFile
    outjars "build/libs/${project.archives_base_name}-${version}-proguarded.jar"
    
    fileTree("${System.properties['java.home']}\\jmods\\") {
        forEach() {
            libraryjars "${it.path}"
        }
    }

    libraryjars configurations.compileClasspath
    
    dontwarn '**'

    keepattributes 'Signature,*Annotation*,Exceptions'
    
    keep 'class com.soarclient.mixin.mixins** { *; }'
    keeppackagenames 'com.soarclient.mixin.mixins**'
    
    renamesourcefileattribute 'SourceFile'
    repackageclasses ''
    
    useuniqueclassmembernames
    dontusemixedcaseclassnames
    dontoptimize
    dontshrink
}

remapJar {
    dependsOn proguard
    input = file("build/libs/${project.archives_base_name}-${version}-proguarded.jar")
}
kotlin {
    jvmToolchain(21)
}
